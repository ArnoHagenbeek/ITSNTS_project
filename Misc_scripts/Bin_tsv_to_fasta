#!/usr/bin/env python3
"""
Reads the contig-to-bin tsv file generated by binning softwares. Stores which contig belongs to which bin(s),
and uses that information to output fasta files for each bin. 
(bins are written to the working directory)

Bin fasta names will be the same as the bin name in the .tsv file

Usage: (python) Bin_tsv_to_fasta.py contig_to_bin.tsv Original_assembly.fasta
"""
import sys
import os

#Generator function that reads file line by line, without reading the full file into memory
def gen_line_reader(file_path):
    for line in open(file_path, "r"):
        yield line


input_tsv = sys.argv[1]
input_fasta = sys.argv[2]
bin_dic = {}
bin_list = []
#Read over tsv file to find the contigs, and to which bin(s) they belong
for line in gen_line_reader(input_tsv):
    cont_name = line.partition("\t")[0]
    if cont_name in bin_dic:
        print("Error found same contig multiple times: {}".format(cont_name))
    bin_dic[cont_name] = []
    bins = line.partition("\t")[2]
    if len(bins.split()) > 1:
        for bin_name in bins.split():
            bin_name = bin_name.strip()
            if bin_name not in bin_list:
                bin_list.append(bin_name)
            bin_dic[cont_name].append(bin_name)
    else:
        bin_name = bins.strip()
        if bin_name not in bin_list:
            bin_list.append(bin_name)
        bin_dic[cont_name].append(bin_name)
    

#Write output
#To prevent reading the assembly multiple times, output is generated by reading the assembly once. During
#reading, it finds the bins to which the current contig belongs, and writes the contig to the relevant bin file using
#the append command.

#Generate empty text files for the needed bin.fasta files, so the append command can be used when writing
for i in bin_list:
    x = open(i+".fasta", "w")
    x.close()      
#Read over the assembly file checking if contigs are part of a known bin. If so, write the contig to the bin
#using the append command
read = False
current_bins = False
outfile = open(bin_list[0] + ".fasta", "w")
for line in gen_line_reader(input_fasta): #iterate over each line of the file individually
    if line.startswith(">"): #if the line is a scaffold name, check it against the dict
        scaf_name = line.strip(">").partition(" ")[0].strip()
        if scaf_name in bin_dic:
            current_bins = bin_dic[scaf_name] #If the scaffold is associated with bin(s), store which bins and set read to true
            read = True 
        else:
            read = False
            current_bins = False
    if read: #The read variable states that the lines until the next ">" are part of a bin and to be written to bin files
        #Change the opened file(s) to match the bin(s) and write the contig to the file(s)
        for bin_name in current_bins:
            outfile.close()
            outfile = open(bin_name + ".fasta", "a")
            outfile.write(line)
        
